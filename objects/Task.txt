 01-это простой объект
 * Описание задачи: Напишите метод, который проверяет, что аргумент является простым объектом, а не массивом или нулевым значением.
 * Ожидаемый результат: True, если объект простой, иначе false. ({ a: 1 }) => истина, ([1, 2, 3]) => ложь
02 пары
* Описание задачи: Напишите метод, возвращающий глубокий массив типа [[key, value]]
 * Ожидаемый результат: ({ a: 1, b: 2 }) => [['a', 1], ['b', 2]]
03-без
* Описание задачи: Напишите метод, возвращающий новый объект без заданных свойств.
 * Ожидаемый результат: ({a: 1, b: 2}, 'b') => {a: 1}
04-пусто
* Описание задачи: Написать метод, выполняющий неглубокую проверку, является ли объект пустым.
 * Ожидаемый результат: ({}) => истина, ({a: undefined}) => истина, ({a: 1}) => ложь
05-равно
* Описание задачи: Напишите метод, выполняющий неглубокое сравнение двух объектов.
 * Ожидаемый результат: True, если объекты идентичны, false, если объекты разные ({a: 1, b: 1}, {a: 1, b: 1}) => true
06-вызов
 * Описание задачи: Напишите метод, который вызывает метод массива по определенному пути.
 * Ожидаемый результат: ({ a: { b: [1, 2, 3] } }, 'a.b', splice, [1, 2]) => [2, 3]
07-пусто-глубоко
 * Описание задачи: Написать метод, который выполняет глубокую проверку, является ли объект пустым
 * Пустые значения: '', null, NaN, undefined, [], {}
08-равная глубина
 * Описание задачи: Напишите метод, выполняющий глубокое сравнение двух объектов.
 * Ожидаемый результат: True, если объекты равны, false, если объекты разные ({a: 1, b: {c: 1}}, {a: 1, b: {c: 1}}) => true
09-перекресток
 * Описание задачи: Написать метод, который находит неглубокие пересечения объектов.
 * Ожидаемый результат: ({a: 1, b: 2}, {c: 1, b: 2}) => {b: 2}
глубина 10 перекрестков
 * Описание задачи: Написать метод, который находит все пересечения объектов
 * Ожидаемый результат: ({a: 1, b: {c: 3}}, {c: 1, b: {c: 3}}) => {b: {c: 3}}